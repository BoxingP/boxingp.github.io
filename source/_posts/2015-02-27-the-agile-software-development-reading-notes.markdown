---
layout: post
title: "《敏捷软件开发：原则、模式与实践》读书笔记"
date: 2015-02-27 22:05:42 +0800
comments: true
categories:
- Book
- Note
---

发现自己对于Java的一些设计以及实践了解得不够，导致写出来的代码存在着问题，同时也想要和其他人很好地交流自己的设计思路。今天终于摸出了这本书，好好读一下，同时写代码实践，希望会有提高。

<!-- more -->

第二本Bob大叔的书。

##前言

>敏捷开发（Agile Development）

>极限编程（eXtreme Programming，简称XP）

#第I部分 敏捷开发

##第1章 敏捷实践

概括出如何让软件开发团队具有快速工作、响应变化能力的价值观（value）。也就是敏捷联盟宣言。瞄了一眼名单，看到了Martin Fowler，[他的网站](http://martinfowler.com/)有不少干货。

>1. 个体和交互胜过过程和工具

>2. 可以工作的软件胜过面面俱到的文档

>3. 客户合作胜过合同谈判

>4. 响应变化胜过遵循计划

于是引出了12条原则

>1. 我们最优先要做的是通过尽早的、持续的交付有价值的软件来使客户满意。

持续交付。

>2. 即使到了开发的后期，也欢迎改变需求。敏捷过程利用变化来为客户创造竞争优势。

保持软件结构的灵活性。

>3. 经常性地交付可以工作的软件，交付的间隔可以从几周到几个月，交付的时间间隔越短越好。

快速迭代。

>4. 在整个项目开发期间，业务人员和开发人员必须天天都在一起工作。

>5. 围绕被激励起来的个人来构建项目。给他们提供所需要的环境和支持，并且信任他们能够完成工作。

>6. 在团队内部，最具有效果并且富有效率的传递信息的方法，就是面对面的交谈。

>7. 工作的软件是首要的进度度量标准。

我的理解是要明确好真正的目标是什么。

>8. 敏捷过程提倡可持续的开发速度。责任人、开发者和用户应该能够保持一个长期的、恒定的开发速度。

还是那句话，敏捷项目是马拉松长跑。

>9. 不断地关注优秀的技能和好的设计会增强敏捷能力。

>10. 简单——使未完成的工作最大化的艺术——是根本的。

我觉得TDD的好处就是可以避免开发的过程中想太多导致范围超出预期。

>11. 最好的构架、需求和设计出自于自组织的团队。

敏捷团队的成员共同来解决项目中所有方面的问题。

>12. 每隔一定时间，团队会在如何才能更有效地工作方面进行反省，然后相应地对自己的行为进行调整。

隔一段时间进行一下Retro。



（先挖坑，马上填）

{% img left /images/2015/agile-software-development.jpg 98 137 %}

[敏捷软件开发：原则、模式与实践](http://book.douban.com/subject/1140457/) - [Robert C. Martin](http://en.wikipedia.org/wiki/Robert_Cecil_Martin)
